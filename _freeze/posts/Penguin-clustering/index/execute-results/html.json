{
  "hash": "fc7fcca25438975a4aff66345875adab",
  "result": {
    "markdown": "---\ntitle: \"Clustered Penguins\"\nauthor: \"Daniel Sabanov\"\ndate: \"2023-12-04\"\ncategories: [Clustering]\n---\n\n# Using Clustering to Learn More About Penguins\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\npenguins_data = pd.read_csv(\"penguins_size.csv\")\npenguins_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>culmen_length_mm</th>\n      <th>culmen_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>MALE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>FEMALE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>FEMALE</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>FEMALE</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npenguins_data = penguins_data.dropna()\npenguins_data[\"species\"], species_scheme = pd.factorize(penguins_data[\"species\"])\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nnumeric_cols = ['culmen_length_mm', 'culmen_depth_mm', 'flipper_length_mm', 'body_mass_g']\ngraph = pd.plotting.scatter_matrix(penguins_data[numeric_cols], figsize=(20, 20), c=penguins_data[\"species\"], label=species_scheme, diagonal=\"kde\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=1562 height=1553}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler\nscaled_numeric_penguins_data = StandardScaler().fit_transform(penguins_data[numeric_cols])\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=2)\ntwo_component_penguins_data = pca.fit_transform(scaled_numeric_penguins_data)\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfor i, target_class in enumerate(species_scheme):\n    indices = penguins_data[\"species\"] == i\n    plt.scatter(two_component_penguins_data[indices, 0], two_component_penguins_data[indices, 1], label=target_class)\n\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n<matplotlib.legend.Legend at 0x29f377950>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-2.png){width=569 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3)\npredictions = kmeans.fit_predict(scaled_numeric_penguins_data)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/danielsabanov/.pyenv/versions/3.11.6/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfor i, target_class in enumerate(set(predictions)):\n    indices = predictions == i\n    plt.scatter(two_component_penguins_data[indices, 0], two_component_penguins_data[indices, 1], label=target_class)\n\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n<matplotlib.legend.Legend at 0x286b49690>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){width=569 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\npenguins_data[\"predictions\"] = predictions\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfig1, ax1 = plt.subplots(ncols=2, figsize=(20, 10))\nfig2, ax2 = plt.subplots(ncols=2, figsize=(20, 10))\nfig3, ax3 = plt.subplots(ncols=2, figsize=(20, 10))\nfig4, ax4 = plt.subplots(ncols=2, figsize=(20, 10))\n\npenguins_data.groupby(\"species\")[\"culmen_length_mm\"].plot.kde(ax=ax1[0], title=\"Culmen Length in mm - True\")\npenguins_data.groupby(\"species\")[\"culmen_depth_mm\"].plot.kde(ax=ax2[0], title=\"Culmen Depth in mm - True\")\npenguins_data.groupby(\"species\")[\"flipper_length_mm\"].plot.kde(ax=ax3[0], title=\"Flipper Length in mm - True\")\npenguins_data.groupby(\"species\")[\"body_mass_g\"].plot.kde(ax=ax4[0], title=\"Body Mass in g - True\")\n\npenguins_data.groupby(\"predictions\")[\"culmen_length_mm\"].plot.kde(ax=ax1[1], title=\"Culmen Length in mm - Predictions\")\npenguins_data.groupby(\"predictions\")[\"culmen_depth_mm\"].plot.kde(ax=ax2[1], title=\"Culmen Depth in mm - Predictions\")\npenguins_data.groupby(\"predictions\")[\"flipper_length_mm\"].plot.kde(ax=ax3[1], title=\"Flipper Length in mm - Predictions\")\npenguins_data.groupby(\"predictions\")[\"body_mass_g\"].plot.kde(ax=ax4[1], title=\"Body Mass in g - Predictions\")\n\n\nplt.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n[]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-2.png){width=1564 height=801}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-3.png){width=1565 height=801}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-4.png){width=1564 height=801}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-5.png){width=1581 height=801}\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nencoded = pd.get_dummies(penguins_data, columns=[\"island\", \"sex\"])\nencoded.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>culmen_length_mm</th>\n      <th>culmen_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>predictions</th>\n      <th>island_Biscoe</th>\n      <th>island_Dream</th>\n      <th>island_Torgersen</th>\n      <th>sex_.</th>\n      <th>sex_FEMALE</th>\n      <th>sex_MALE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>39.3</td>\n      <td>20.6</td>\n      <td>190.0</td>\n      <td>3650.0</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nencoded = encoded.drop(columns=[\"sex_.\", \"sex_MALE\", \"island_Torgersen\", \"predictions\"])\nencoded.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>culmen_length_mm</th>\n      <th>culmen_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>island_Biscoe</th>\n      <th>island_Dream</th>\n      <th>sex_FEMALE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>39.3</td>\n      <td>20.6</td>\n      <td>190.0</td>\n      <td>3650.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nscaled_penguins_data = encoded\nscaled_penguins_data[numeric_cols] = StandardScaler().fit_transform(scaled_penguins_data[numeric_cols])\nscaled_penguins_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>culmen_length_mm</th>\n      <th>culmen_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>island_Biscoe</th>\n      <th>island_Dream</th>\n      <th>sex_FEMALE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>-0.897653</td>\n      <td>0.783487</td>\n      <td>-1.429521</td>\n      <td>-0.571229</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>-0.824290</td>\n      <td>0.121896</td>\n      <td>-1.072408</td>\n      <td>-0.509011</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>-0.677564</td>\n      <td>0.427246</td>\n      <td>-0.429605</td>\n      <td>-1.193405</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>-1.337831</td>\n      <td>1.088836</td>\n      <td>-0.572450</td>\n      <td>-0.944535</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>-0.860972</td>\n      <td>1.750427</td>\n      <td>-0.786718</td>\n      <td>-0.695664</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nscaled_penguins_data[\"island_Biscoe\"] = scaled_penguins_data[\"island_Biscoe\"].astype(int)\nscaled_penguins_data[\"island_Dream\"] = scaled_penguins_data[\"island_Dream\"].astype(int)\nscaled_penguins_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>culmen_length_mm</th>\n      <th>culmen_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>island_Biscoe</th>\n      <th>island_Dream</th>\n      <th>sex_FEMALE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>-0.897653</td>\n      <td>0.783487</td>\n      <td>-1.429521</td>\n      <td>-0.571229</td>\n      <td>0</td>\n      <td>0</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>-0.824290</td>\n      <td>0.121896</td>\n      <td>-1.072408</td>\n      <td>-0.509011</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>-0.677564</td>\n      <td>0.427246</td>\n      <td>-0.429605</td>\n      <td>-1.193405</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>-1.337831</td>\n      <td>1.088836</td>\n      <td>-0.572450</td>\n      <td>-0.944535</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>-0.860972</td>\n      <td>1.750427</td>\n      <td>-0.786718</td>\n      <td>-0.695664</td>\n      <td>0</td>\n      <td>0</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\npca = PCA(n_components=2)\ntwo_component_penguins_data = pca.fit_transform(scaled_penguins_data)\n\nfor i, target_class in enumerate(species_scheme):\n    indices = penguins_data[\"species\"] == i\n    plt.scatter(two_component_penguins_data[indices, 0], two_component_penguins_data[indices, 1], label=target_class)\n\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n<matplotlib.legend.Legend at 0x286b281d0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-2.png){width=569 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nkmeans = KMeans(n_clusters=3)\npredictions = kmeans.fit_predict(scaled_penguins_data.drop(columns=[\"species\"]))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/danielsabanov/.pyenv/versions/3.11.6/lib/python3.11/site-packages/sklearn/cluster/_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfor i, target_class in enumerate(set(predictions)):\n    indices = predictions == i\n    plt.scatter(two_component_penguins_data[indices, 0], two_component_penguins_data[indices, 1], label=target_class)\n\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n<matplotlib.legend.Legend at 0x2987755d0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-2.png){width=569 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nencoded[\"predictions\"] = predictions\n```\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfig1, ax1 = plt.subplots(ncols=2, figsize=(20, 10))\nfig2, ax2 = plt.subplots(ncols=2, figsize=(20, 10))\nfig3, ax3 = plt.subplots(ncols=2, figsize=(20, 10))\nfig4, ax4 = plt.subplots(ncols=2, figsize=(20, 10))\n\nencoded.groupby(\"species\")[\"culmen_length_mm\"].plot.kde(\n    ax=ax1[0], title=\"Culmen Length in mm - True\"\n)\nencoded.groupby(\"species\")[\"culmen_depth_mm\"].plot.kde(\n    ax=ax2[0], title=\"Culmen Depth in mm - True\"\n)\nencoded.groupby(\"species\")[\"flipper_length_mm\"].plot.kde(\n    ax=ax3[0], title=\"Flipper Length in mm - True\"\n)\nencoded.groupby(\"species\")[\"body_mass_g\"].plot.kde(\n    ax=ax4[0], title=\"Body Mass in g - True\"\n)\n\nencoded.groupby(\"predictions\")[\"culmen_length_mm\"].plot.kde(\n    ax=ax1[1], title=\"Culmen Length in mm - Predictions\"\n)\nencoded.groupby(\"predictions\")[\"culmen_depth_mm\"].plot.kde(\n    ax=ax2[1], title=\"Culmen Depth in mm - Predictions\"\n)\nencoded.groupby(\"predictions\")[\"flipper_length_mm\"].plot.kde(\n    ax=ax3[1], title=\"Flipper Length in mm - Predictions\"\n)\nencoded.groupby(\"predictions\")[\"body_mass_g\"].plot.kde(\n    ax=ax4[1], title=\"Body Mass in g - Predictions\"\n)\n\n\nplt.plot()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n[]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-2.png){width=1556 height=801}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-3.png){width=1556 height=801}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-4.png){width=1556 height=801}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-5.png){width=1556 height=801}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}