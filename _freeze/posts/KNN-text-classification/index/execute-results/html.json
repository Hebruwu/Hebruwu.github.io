{
  "hash": "32c11cb13eb0610bf2dfd42fe09448b1",
  "result": {
    "markdown": "---\ntitle: \"KNN for Text Classification\"\nauthor: \"Daniel Sabanov\"\ndate: \"2023-12-03\"\ncategories: [KNN, NLP, Outlier Prediction]\n---\n\n# Compression Is All You Need\n\n![Taken From Mac Business Solutions](img.jpg)\n\n## Introduction\nNeural networks (NN), deep learning (DL), and natural language processing (NLP) are all the rage today, and not without reason. In 2017, Google published \"[Attention Is All You Need](https://arxiv.org/abs/1706.03762)\" [1]. This paper presented the transformer architecture, which would later be used in a large variety of NLP models such as Google's BERT and OpenAI's GPT, which use transformers within their architecture.\n\nTransformer architectures show great promise as they tend to be more parallelizable, require less time to train, and tend to be of higher quality [1]. However, neural networks, especially deep neural networks, tend to be computationally expensive and require large datasets to train. Thus, a team from the University of Waterloo proposed an alternative method for classifying text using a GZIP compressor and the K-Nearest Neighbor clustering algorithm.\n\nThe team demonstrated the viability of the method on a variety of datasets, testing the accuracy compared to non-pretrained datasets. As it turns out, their model is able to compete with the larger models and was even capable of outperforming BERT in some cases.\n\nIn the following blog post, I plan to try and recreate the said model on a different dataset to see how accurate the model is and to learn to apply it myself. Specifically, I want to apply the model to the most classic example of outlier detection - spam or ham!\n\n## Implementing the algorithm\n\nThe algorithm is simple and consists of KNN as the classification method and GZIP as the distance metric, but what does it mean?\n\n\n### What is KNN?\nKNN (also known as KNN) is a simple and intuitive machine learning algorithm used for classification and regression tasks. It works by finding the K closest data points (neighbors) to a given input data point in a dataset and then classifying or predicting the target variable based on the majority class or average value of those K neighbors.\n\n### What is GZIP?\nGZIP is a file compression utility that is typically used for compressing files to be transfered over network or for storage. You most likely have used GZIP before in order to do that. An interesting detail of the GZIP compression is that repetative texts will be compressed into smaller sizes than texts that are not repetative. This is due to the fact that the algorithm uses [Huffman coding](https://en.wikipedia.org/wiki/Huffman_coding), which replaces the most repeated sequences with shorter sequences, and [LZ77](https://en.wikipedia.org/wiki/LZ77_and_LZ78), which stores references to repeated sequnces instead of using the sequences themselves (think of it like having a variable assigned to sequence and then using that variable later instead of the sequence).\n\n\n### How do they fit together?\nKNN can be used in order to classifiy different sentences. However, to classify something when using KNN we need a way to also measure the distance between two datapoints. This is where GZIP comes in. Since GZIP compresses repetative sequences into smaller sizes - similar sequences that are concatonated together will compress to smaller sizes as well. This allows us to formulate a distance metric based on how well a sequence is compressed.\n\nConsider an example:\nWe have sequences x1, x2, and x3. Assume that x1 and x2 are similar sequences while x3 is less similar. Let C(x, y) be our GZIP compressor. Then it follows that:\n$$\nsize(C(x1 + x2)) < size(C(x1 + x3))\n$$\n\nThis is the intuition behind the method. We will first begin by implementing the metric.\n\n### Metric\n\nThe most basic implementation of the metric would look like this, but the keen eyed may notice that it could be optimized.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport gzip as gz\n\n\ndef gzip_metric(x1, x2):\n    Cx1 = len(gz.compress(x1.encode()))\n    Cx2 = len(gz.compress(x2.encode()))\n\n    x1x2 = \" \".join([x1, x2])\n    Cx1x2 = len(gz.compress(x1x2.encode()))\n    ncd = (Cx1x2 - min(Cx1, Cx2)) / max(Cx1, Cx2)\n    return ncd\n```\n:::\n\n\n### KNN\n\nNormally, we would use an already existing library such as Scikit-Learn and simply import the KNN algorithm from there (neighbors.KNeighborsClassifier). However, when trying to do that, I run into an interesting problem. Turns out that Scikit's KNeighborsClassifier does not operate with strings and expects the user to encode them beforehand. We do not want to encode these strings since we want our GZIP metric to interact with the strings directly. Luckily, KNN is simple to implement by hand and is also implemented in the paper.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n\ndef knn_classify(known_df: pd.DataFrame, unknown_sr: pd.Series, k: int = 3):\n    knowns: np.ndarray = known_df.to_numpy(copy=True)\n    unknowns: np.ndarray = unknown_sr.to_numpy(copy=True)\n    predictions = []\n    for x1 in unknowns:\n        distances_from_x1: np.array = np.array(\n            [gzip_metric(x1, x2) for x2, _ in knowns]\n        )\n        sorted_idx = np.argsort(distances_from_x1)\n        top_k_classes = knowns[sorted_idx[:k], 1]\n        values, counts = np.unique(top_k_classes, return_counts=True)\n        predicted_class = values[np.argmax(counts)]\n        predictions.append(predicted_class)\n\n    return predictions\n```\n:::\n\n\n### Optimization\n\nAs you have seen in the KNN section, x2 is computed multiple times for every x1. Therefore, when we use the gzip metric, we unecessarily compress x1 multiple times, which is time-consuming. So, instead, we could precompute that value inside our knn_function and pass the precomputed value into our metric.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef improved_gzip_metric(Cx1, x1, x2):\n    Cx2 = len(gz.compress(x2.encode()))\n    x1x2 = \" \".join([x1, x2])\n    Cx1x2 = len(gz.compress(x1x2.encode()))\n    ncd = (Cx1x2 - min(Cx1, Cx2)) / max(Cx1, Cx2)\n    return ncd\n\n\ndef improved_knn_classify(known_df: pd.DataFrame, unknown_sr: pd.Series, k: int = 3):\n    knowns: np.ndarray = known_df.to_numpy(copy=True)\n    unknowns: np.ndarray = unknown_sr.to_numpy(copy=True)\n    predictions = []\n    for x1 in unknowns:\n        Cx1 = len(gz.compress(x1.encode()))\n        distances_from_x1: np.array = np.array(\n            [improved_gzip_metric(Cx1, x1, x2) for x2, _ in knowns]\n        )\n        sorted_idx = np.argsort(distances_from_x1)\n        top_k_classes = knowns[sorted_idx[:k], 1]\n        values, counts = np.unique(top_k_classes, return_counts=True)\n        predicted_class = values[np.argmax(counts)]\n        predictions.append(predicted_class)\n\n    return predictions\n```\n:::\n\n\n## Spam or Ham\n\nThe  [dataset](https://www.kaggle.com/datasets/thedevastator/sms-spam-collection-a-more-diverse-dataset) I would like to look at was taken from kaggle and includes a collection of messages labeled as spam or not spam (also called ham).\n\nLet's take a quick look at the data using the pandas library. \n\n### Data Overview\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# The dataset comes with a single file named train.csv. Interestingly, there is no test.csv.\ndf_spam = pd.read_csv(\"Spam_dataset/train.csv\") \ndf_spam[\"sms\"] = df_spam[\"sms\"].values.astype(\"str\")\ndf_spam.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sms</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Ok lar... Joking wif u oni...\\n</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>U dun say so early hor... U c already then say...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYou can see that the dataset is split into two columns. One containing the message, the second containing the label. Conviniently for us, the labels are already hot-encoded, so we do not need to go through the encoding step. Something to note, if the label is '0' then the message is considered ham, if it is labled as '1' the message is spam.\n\nLet's quickly look at the distribution of the data.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ngrouped_counts = df_spam.groupby(\"label\").size()\ngrouped_counts.plot.bar(x=\"label\")\ngrouped_counts\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nlabel\n0    4827\n1     747\ndtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-2.png){width=583 height=425}\n:::\n:::\n\n\nWe can see that the overwhelming number of labels belong to 'ham'. When we split this data into a train and test dataset, we will need to pay special attention that both of the labels are present in both the testing and training datasets. To do that we can use sklearn's train_test_split.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nX = df_spam[\"sms\"]\ny = df_spam[\"label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\ntrain_df = pd.concat([X_train, y_train], axis=1)\ntest_df = pd.concat([X_test, y_test], axis=1)\n```\n:::\n\n\nNow that the data has been split, we can use the algorithm we built to try and classify the text messages.\n\n### Test Run\nFirst let's try the unoptimized algorithm.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ny_bar_slow = knn_classify(train_df, X_test)\n```\n:::\n\n\nThis cell took 3 minutes and 50 seconds to execute on my system. Now, we will run the improved implementation.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ny_bar = improved_knn_classify(train_df, X_test)\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ny_bar == y_bar_slow\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\nWe can see that the results are identical, yet the improved version runs faster. So, from now on, we will simply use the improved version.\nLet's see how the model has performed.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import ConfusionMatrixDisplay\n\nconf_mat = confusion_matrix(y_test, y_bar)\nConfusionMatrixDisplay(conf_mat).plot()\n\nprint(\"f1:\", f1_score(y_test, y_bar))\nprint(\"accuracy:\", accuracy_score(y_test, y_bar))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nf1: 0.9547038327526132\naccuracy: 0.9883408071748879\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-2.png){width=504 height=429}\n:::\n:::\n\n\nThese results are pretty impressive. However, this could be a result of a particularly lucky split. We will now try to perform cross validation while also experimenting with different sizes of K.\n\n### Full test\n\nFirst, need to consider the possible size of K. A good rule of thumb for KNN is to select a K that is equal to $\\sqrt(n)$, where $n$ is the number of datapoints in the training set. We have 4459 data points in our training set. That means that our K should be approximately $66$. We could try multiple K values as well. We can try a list of $64, 65, 66, 67, 68$ since these values are in the vicinity of our rule of thumb and also $3$, since we have recieved good results from it.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom sklearn.model_selection import StratifiedKFold\nfrom multiprocess import Pool\n\nf1_scores = []\naccuracy_scores = []\nKs = [3, 64, 65, 66, 67, 68]\nskf = StratifiedKFold(n_splits=5)\nwith Pool() as pool:\n    for train_idx, test_idx in skf.split(X, y):\n        train_df = df_spam.iloc[train_idx]\n        test_df = df_spam.iloc[test_idx]\n        args = [(train_df, test_df[\"sms\"], K) for K in Ks]\n        y_bars = pool.starmap(improved_knn_classify, args)\n        accuracies = []\n        f1s = []\n        for y_bar in y_bars:\n            accuracies.append(accuracy_score(test_df[\"label\"], y_bar))\n            f1s.append(f1_score(test_df[\"label\"], y_bar))\n        \n        accuracy_scores.append(accuracies)\n        f1_scores.append(f1s)\n```\n:::\n\n\nYou may notice that the above code uses a new 3rd party library names \"multiprocess\" (not to be confused with Python's \"multiprocessing\" library). It is a fork of the \"multiprocessing\" built-in Python library that performs better in the Jupyter environment. We are using this library in order to be able to process multiple K values in parallel. Otherwise, this process would have taken significantly longer.\n\nNow, lets save our metric results as dataframes for further processing.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nf1_df = pd.DataFrame(f1_scores, columns=Ks)\naccuracy_df = pd.DataFrame(accuracy_scores, columns=Ks)\nprint(f1_df)\nprint(accuracy_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         3         64        65        66        67        68\n0  0.944444  0.892989  0.897059  0.897059  0.897059  0.897059\n1  0.951389  0.897059  0.901099  0.897059  0.897059  0.897059\n2  0.936170  0.888889  0.888889  0.884758  0.884758  0.880597\n3  0.932862  0.872180  0.872180  0.867925  0.872180  0.867925\n4  0.954386  0.900369  0.900369  0.900369  0.900369  0.900369\n         3         64        65        66        67        68\n0  0.985650  0.973991  0.974888  0.974888  0.974888  0.974888\n1  0.987444  0.974888  0.975785  0.974888  0.974888  0.974888\n2  0.983857  0.973094  0.973094  0.972197  0.972197  0.971300\n3  0.982960  0.969507  0.969507  0.968610  0.969507  0.968610\n4  0.988330  0.975763  0.975763  0.975763  0.975763  0.975763\n```\n:::\n:::\n\n\nWe can create a bar chart in order to understand the results a bit better. We will first look at the $F1$ score.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nax = f1_df.plot.bar(rot=0, title=\"F1 Scores of Different Splits and Different K Values\")\nax.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\nax.set_xlabel(\"Split Index\")\nax.set_ylabel(\"F1 Score\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nText(0, 0.5, 'F1 Score')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-2.png){width=660 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nax = accuracy_df.plot.bar(rot=0, title=\"Accuracy Scores of Different Splits and Different K Values\")\nax.legend(loc='center left',bbox_to_anchor=(1.0, 0.5))\nax.set_xlabel(\"Split Index\")\nax.set_ylabel(\"Accuracy Score\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nText(0, 0.5, 'Accuracy Score')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-2.png){width=660 height=449}\n:::\n:::\n\n\nFrom both of these plots we can see that there is no significant difference between different splits of the dataset. Additionally, there does not appear to be a significant difference in performance of the K values that are closest to our rule of thumb. However, turns out that a K value of $3$ is significantly more profitable than the other K values. We can take a look at the average score for $K=3$ for each metric below:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint(\"F1 Average:\", f1_df[3].mean())\nprint(\"Accuracy Average:\", accuracy_df[3].mean())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nF1 Average: 0.9438503403648584\nAccuracy Average: 0.9856481310028903\n```\n:::\n:::\n\n\n## References\n\n[1] A. Vaswani et al., “Attention is all you need,” arXiv.org, https://arxiv.org/abs/1706.03762. \n[2] Z. Jiang et al., “‘low-resource’ text classification: A parameter-free classification method with compressors,” ACL Anthology, https://aclanthology.org/2023.findings-acl.426/. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}